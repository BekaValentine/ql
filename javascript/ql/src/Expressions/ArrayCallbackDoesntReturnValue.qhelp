<!DOCTYPE qhelp PUBLIC
  "-//Semmle//qhelp//EN"
  "qhelp.dtd">

<qhelp>
	
	<overview>
		<p>
			Many array methods, such as <code>map</code> and <code>filter</code>, take callback
			arguments which are expected to return values.
		</p>
		
		<p>
			Use of a callback that can sometimes returning nothing is an indication that the
			programmer may have meant to use some other function, such as <code>forEach</code>,
			which makes no use of the returned value.
		</p>
		
		<p>
			Where side effects are concerned, <code>map</code> and <code>forEach</code> are
			identical, so such confusion is understandable. 
		</p>
	</overview>
	
	<recommendation>
		<p>
			Replace the empty returns with a value return, or possibly replace the method with
			one that doesn't expect the callback to return a value.
		</p>
	</recommendation>
	
	<example>
		
		
		<p>
			In the following code, the list <code>arr</code> is mapped over using a callback
			which returns nothing if the conditional is false. The intention is to purify some
			array elements in just those cases when the predicate <code>pred</code> is true.
		</p>
		
		<sample language="javascript">
			var arr2 = arr.map(function (el) {
				if (pred(el)) {
					return purify(el);				
				}			
			});
		</sample>
		
		<p>
			This doesn't function as described, however. Since the conditional has no else
			branch, and no return statement after it, whenever the predicate is false, the
			function will return <code>undefined</code> instead of the unpurified element.
		</p>
		
		<p>
			The developer should instead add explicit returns in all branches: 
		</p>
		
		<sample language="javascript">
			var arr2 = arr.map(function (el) {
				if (pred(el)) {
					return purify(el);				
				} else {
					return el;
				}
			});
		</sample>
	</example>
	
	<example>
		<p>
			Another common use for methods like <code>map</code> is to call some side effecting
			function on each element of a list. For example:
		</p>
		
		<sample language="javascript">
			arr.map(function (el) {
				if (pred(el)) {
					arr2.push(el)
				}
			});
		</sample>
		
		<p>
			In cases like this, the appropriate thing to do is replace the <code>map</code>
			method with the <code>forEach</code> method:
		</p>
		
		<sample language="javascript">
			arr.forEach(function (el) {
				if (pred(el)) {
					arr2.push(el)
				}
			});
		</sample>
		
		<p>
			A secondary indicator that this is the underlying intention is that the use of the
			method is never actually assigned to anything, as in this example.
		</p>
	</example>
	
	<references>
		<li>DeepScan: <a href="https://deepscan.io/docs/rules/array-callback-return-missing">ARRAY_CALLBACK_RETURN_MISSING</a></li>
	</references>
</qhelp>